@model InscripcionMaterias.Models.ViewModels.FiltroCierreCicloViewModel

@{
    ViewData["Title"] = "Cerrar Ciclo";
}

<h2>Cierre de Ciclo Académico</h2>

<form asp-action="CerrarCiclo" method="post">
    @Html.AntiForgeryToken()
    <div class="row">
        <div class="form-group col-4">
            <label>Pensum</label>
            @Html.DropDownListFor(m => m.IdPensum, Model.Pensums, "Seleccione un pensum", new { @class = "form-control" })
        </div>
        <div class="form-group col-4">
            <label>Ciclo Académico</label>
            @Html.DropDownListFor(m => m.CicloAcademico, Model.Ciclos, "Seleccione un ciclo", new { @class = "form-control" })
        </div>
        <div class="form-group col-4">
            <label>Año</label>
            @Html.DropDownListFor(m => m.Anio, Model.Anios, "Seleccione un año", new { @class = "form-control" })
        </div>
    </div>
    <button type="submit" class="btn btn-primary mt-3">Buscar</button>
</form>

@if (Model.Resultados != null && Model.Resultados.Any())
{
    <hr />
    <h3>Resultados</h3>
    <table class="table table-bordered table-striped mt-3">
        <thead>
            <tr>
                <th>Alumno</th>
                <th>Materias</th>
                <th>Estado</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var alumno in Model.Resultados)
            {
                <tr>
                    <td>@alumno.NombreAlumno</td>
                    <td>
                        <ul>
                            @foreach (var materia in alumno.Materias)
                            {
                                <li>@materia.NombreMateria</li>
                            }
                        </ul>
                    </td>
                    <td>
                        @foreach (var materia in alumno.Materias)
                        {
                            var inputName = $"estado_{alumno.IdAlumno}_{materia.IdMateria}";

                            if (materia.Aprobado.HasValue)
                            {
                                <div class="form-check mb-1">
                                    <input type="radio"
                                           class="form-check-input"
                                           checked disabled />
                                    <label class="form-check-label text-@(materia.Aprobado.Value ? "success" : "danger")">
                                        @(materia.Aprobado.Value ? "Aprobada (guardada)" : "Reprobada (guardada)")
                                    </label>
                                </div>
                            }
                            else
                            {
                                <div class="form-check form-check-inline">
                                    <input type="radio"
                                           class="form-check-input"
                                           name="@inputName"
                                           id="@($"{inputName}_aprobado")"
                                           value="aprobado" />
                                    <label class="form-check-label" for="@($"{inputName}_aprobado")">Aprobado</label>
                                </div>
                                <div class="form-check form-check-inline mb-2">
                                    <input type="radio"
                                           class="form-check-input"
                                           name="@inputName"
                                           id="@($"{inputName}_reprobado")"
                                           value="reprobado" />
                                    <label class="form-check-label" for="@($"{inputName}_reprobado")">Reprobado</label>
                                </div>
                                <br />
                            }
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button id="btnGuardarResultados" class="btn btn-success mt-3">Guardar Resultados</button>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        document.getElementById("btnGuardarResultados").addEventListener("click", function () {
            const resultados = [];

        @foreach (var alumno in Model.Resultados)
        {
            <text>
                    {
                        let materiasSeleccionadas = [];
            </text>

            @foreach (var materia in alumno.Materias)
            {
                if (!materia.Aprobado.HasValue)
                {
                    var inputName = $"estado_{alumno.IdAlumno}_{materia.IdMateria}";

                    <text>
                                        var aprobadoRadio = document.getElementById("@($"{inputName}_aprobado")");
                                        var reprobadoRadio = document.getElementById("@($"{inputName}_reprobado")");

                                        if ((aprobadoRadio && aprobadoRadio.checked) || (reprobadoRadio && reprobadoRadio.checked)) {
                                            materiasSeleccionadas.push({
                                                idMateria: @materia.IdMateria,
                                                aprobado: aprobadoRadio.checked
                                            });
                                        }
                    </text>
                }
            }

            <text>
                        resultados.push({
                            idAlumno: @alumno.IdAlumno,
                            materias: materiasSeleccionadas
                        });
                    }
            </text>
        }

            const data = {
                idPensum: @Model.IdPensum,
                ciclo: @Model.CicloAcademico,
                anio: @Model.Anio,
                resultados: resultados
            };

            Swal.fire({
                title: '¿Estás seguro?',
                text: "Se guardarán los resultados seleccionados. Esta acción no se puede deshacer.",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Sí, guardar',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch('@Url.Action("GuardarResultados", "ResultadosCicloAcademico")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify(data)
                    })
                    .then(res => {
                        if (!res.ok) throw new Error("Error al guardar.");
                        return res.json();
                    })
                    .then(result => {
                        Swal.fire({
                            title: '¡Guardado!',
                            text: result.mensaje,
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then(() => {
                            location.reload();
                        });
                    })
                    .catch(err => {
                        console.error(err);
                        Swal.fire({
                            title: 'Error',
                            text: 'Ocurrió un error al guardar los resultados.',
                            icon: 'error',
                            confirmButtonText: 'Cerrar'
                        });
                    });
                }
            });
        });
    </script>
}
