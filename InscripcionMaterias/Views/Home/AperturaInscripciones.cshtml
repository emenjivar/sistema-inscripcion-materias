@model InscripcionMaterias.Models.ViewModels.SimpleInscripcionViewModel

@{
    ViewBag.Title = "Apertura de Inscripciones";
}

<div class="container mt-4">
    <h2 class="mb-4">Apertura de inscripciones</h2>

    @* Mostrar mensajes de éxito o error (estos vienen del TempData del controlador) *@
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @* VERIFICACIÓN ADICIONAL PARA EVITAR NULLREFERENCEEXCEPTION *@
    @if (TempData.ContainsKey("ErrorMessage") && TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }



    <div class="card shadow mb-4">
        <div class="card-header">
            Datos de Inscripción
        </div>
        <div class="card-body">
            @* Formulario para guardar la información de la inscripción *@
            <form id="formInscripcion" asp-action="GuardarInscripcion" asp-controller="Inscripcion" method="post">
                @Html.AntiForgeryToken() @* Muy importante para la seguridad *@

                @* Campo oculto para saber si estamos actualizando o creando una nueva inscripción *@
                <input type="hidden" id="IdInscripcionActual" name="IdInscripcionActual" value="@Model.IdInscripcionActual" />

                <div class="row mb-3">
                    <div class="col-md-6">
                        <label for="CicloAcademico" class="form-label">Ciclo académico</label>
                        <input type="number" class="form-control" id="CicloAcademico" name="CicloAcademico" value="@Model.CicloAcademico" required />
                        @Html.ValidationMessageFor(model => model.CicloAcademico, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-6">
                        <label for="Anio" class="form-label">Año</label>
                        <input type="number" class="form-control" id="Anio" name="Anio" value="@Model.Anio" required />
                        @Html.ValidationMessageFor(model => model.Anio, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row mb-3 align-items-end">
                    <div class="col-md-6">
                        <label for="IdPensumSeleccionado" class="form-label">Pensum (Carrera)</label>
                        @Html.DropDownListFor(model => model.IdPensumSeleccionado, Model.ListaPensums, "Seleccione un Pensum", new { @class = "form-select", id = "IdPensumSeleccionado", required = "required" })
                        @Html.ValidationMessageFor(model => model.IdPensumSeleccionado, "", new { @class = "text-danger" })
                    </div>
                  
<!-- Inicio del cambio en rama de sergio-->

                <div class="form-group">
                    <label asp-for="Estado" class="control-label"></label>
                    <select asp-for="Estado" asp-items="Model.ListaEstados" class="form-control">
                        <option value="">-- Seleccione Estado --</option>
                    </select>
                    <span asp-validation-for="Estado" class="text-danger"></span>
                </div>

                    
                    <div class="col-md-2 d-grid gap-2">
                        <button type="submit" class="btn btn-success">Guardar</button>
                    </div>
                    
<!-- fin del conflicto -->
                </div>
            </form>
        </div>
    </div>

    <h3 class="mb-3">Bloques de clases</h3>
    
    <div class="card shadow mb-4">
        <div class="card-header">
            Agregar Bloque de Clase
        </div>
        <div class="card-body">
            @* Formulario para agregar un nuevo bloque de clase (usará AJAX) *@
            <form id="formAgregarBloque" asp-action="AgregarBloque" asp-controller="Inscripcion" method="post">
                @Html.AntiForgeryToken()
                @* Campo oculto para enviar el ID de la inscripción actual al controlador *@
                <input type="hidden" name="IdInscripcionActual" value="@Model.IdInscripcionActual" />

                <div class="row mb-3">
                    <div class="col-md-6">
                        <label for="IdMateriaSeleccionada" class="form-label">Materia</label>
                        @Html.DropDownListFor(model => model.IdMateriaSeleccionada, Model.ListaMaterias, "Seleccione una Materia", new { @class = "form-select", id = "IdMateriaSeleccionada", required = "required" })
                        @Html.ValidationMessageFor(model => model.IdMateriaSeleccionada, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-6">
                        <label for="DiaSemana" class="form-label">Día de la semana</label>
                        @Html.DropDownListFor(model => model.DiaSemana, Model.ListaDiasSemana, "Seleccione un Día", new { @class = "form-select", id = "DiaSemana", required = "required" })
                        @Html.ValidationMessageFor(model => model.DiaSemana, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label for="HoraInicioString" class="form-label">Hora inicio (HH:MM)</label>
                        <input type="time" class="form-control" id="HoraInicioString" name="HoraInicioString" placeholder="Ej: 08:00" value="@Model.HoraInicioString" required />
                        @Html.ValidationMessageFor(model => model.HoraInicioString, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-6">
                        <label for="HoraFinString" class="form-label">Hora fin (HH:MM)</label>
                        <input type="time" class="form-control" id="HoraFinString" name="HoraFinString" placeholder="Ej: 09:50" value="@Model.HoraFinString" required />
                        @Html.ValidationMessageFor(model => model.HoraFinString, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="row mb-3 align-items-end">
                    <div class="col-md-4">
                        <label for="IdGrupoSeleccionado" class="form-label">Grupo</label>
                        <div ="input-group">
                          
                            @Html.DropDownListFor(model => model.IdGrupoSeleccionado, Model.ListaGrupos, "Seleccione un Grupo", new { @class = "form-select", id = "IdGrupoSeleccionado", required = "required" })
                            @Html.ValidationMessageFor(model => model.IdGrupoSeleccionado, "", new { @class = "text-danger" })

                            <button type="button" class="btn btn-outline-secondary" id="btnNuevoGrupoModal">
                                <i class="bi bi-plus-lg"></i> Nuevo Grupo
                            </button>
                        
                        </div>
                    </div>
                     


                    <div class="col-md-3 d-grid gap-2">
                        <button type="submit" class="btn btn-primary">Agregar bloque</button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    @* Este DIV es donde se carga la tabla de bloques de clase (se actualizará con AJAX) *@
   <div class="card shadow mb-4">
        <div id="bloquesDeClaseTablaContainer" class="table-responsive">
            @* Aquí se renderizará la vista parcial con los datos iniciales de la tabla *@
            @Html.Partial("_BloquesDeClaseTabla", Model)
        </div>
    </div>
</div>



<div class="modal fade" id="crearGrupoModal" tabindex="-1" aria-labelledby="crearGrupoModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="crearGrupoModalLabel">Crear Nuevo Grupo</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="modalBodyCrearGrupo">
                Cargando formulario...
            </div>
            
        </div>
    </div>
</div>



@section Scripts {

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script> 

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    } @* Esencial para la validación del cliente *@

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        $(document).ready(function () {
            // Cuando se envía el formulario "Agregar bloque"
            $('#formAgregarBloque').submit(function (e) {
                e.preventDefault(); // Detener el envío normal del formulario (para usar AJAX)

                var currentInscripcionId = $('#IdInscripcionActual').val();
                if (!currentInscripcionId || currentInscripcionId <= 0) {
                    alert('Por favor, primero debe guardar la información de la inscripción (formulario superior).');
                    return; // Detener la ejecución si no hay ID de inscripción
                }

                // if ($(this).valid()) { // Si el formulario es válido según las reglas de validación
                var formData = $(this).serialize(); // Convertir los datos del formulario a un formato que AJAX pueda enviar

                $.ajax({
                    url: '@Url.Action("AgregarBloque", "Inscripcion")', // A dónde enviar la solicitud (Controlador y Acción)
                    type: 'POST', // Tipo de solicitud: POST para enviar datos
                    data: formData, // Los datos a enviar
                    success: function (result) {
                        // Cuando la solicitud AJAX es exitosa:
                        // 'result' es lo que el controlador devuelve (nuestra vista parcial con la tabla actualizada)
                        $('#bloquesDeClaseTablaContainer').html(result); // Reemplazar el contenido del DIV de la tabla

                        // Limpiar los campos del formulario de agregar bloque después de un éxito
                        $('#IdMateriaSeleccionada').val('');
                        $('#DiaSemana').val('');
                        $('#HoraInicioString').val('');
                        $('#HoraFinString').val('');
                        $('#IdGrupoSeleccionado').val('');

                        
                        
                    },
                    error: function (xhr, status, error) {
                        // Si hay un error en la solicitud AJAX
                        console.error("Error al agregar bloque:", error);
                        alert('Hubo un problema al agregar el bloque. Por favor, inténtelo de nuevo.');
                    }
                });
                //} // Aquí cierra la llave comentada del `if ($(this).valid())`
            });

            // ---  CÓDIGO PARA EL MODAL DE GRUPO ---

            // Manejar el clic del botón "Nuevo" para abrir el modal de grupo
            $('#btnNuevoGrupoModal').on('click', function () {
                // Limpiar cualquier contenido anterior y mostrar mensaje de carga
                $('#modalBodyCrearGrupo').html('Cargando formulario...');

                // Cargar el formulario parcial de creación de grupo vía AJAX
                $.ajax({
                    url: '@Url.Action("_CrearGrupoModal", "Grupo")', // URL a la nueva acción del controlador Grupo
                    type: 'GET',
                    success: function (data) {
                        $('#modalBodyCrearGrupo').html(data);
                        // Revalidar el formulario después de cargar el contenido
                        // Esto es crucial para que las validaciones de jQuery Unobtrusive funcionen en el contenido cargado dinámicamente
                        var form = $('#modalBodyCrearGrupo').find('form');
                        if (form.length > 0) {
                            // Desinstalar y reinstalar validación para el nuevo contenido
                            form.removeData("validator");
                            form.removeData("unobtrusiveValidation");
                            $.validator.unobtrusive.parse(form);
                        }
                    },
                    error: function (xhr, status, error) {
                        $('#modalBodyCrearGrupo').html('<div class="alert alert-danger">Error al cargar el formulario del grupo: ' + error + '</div>');
                        console.error("Error al cargar formulario de grupo:", error, xhr.responseText);
                    }
                });

                // Mostrar el modal
                var crearGrupoModal = new bootstrap.Modal(document.getElementById('crearGrupoModal'));
                crearGrupoModal.show();
            });

            // Manejar el envío del formulario DENTRO del modal vía AJAX
            // Se usa delegación de eventos porque el formulario se carga dinámicamente
            $('#modalBodyCrearGrupo').on('submit', 'form', function (event) {
                event.preventDefault(); // Evitar el envío normal del formulario

                var form = $(this);
                // Si el formulario no es válido según jQuery Validate, no hacer AJAX
                if (!form.valid()) {
                    return;
                }

                $.ajax({
                    url: '@Url.Action("_GuardarGrupoModal", "Grupo")', // URL a la acción POST AJAX del controlador Grupo
                    type: 'POST',
                    data: form.serialize(), // Serializar los datos del formulario
                    success: function (response) {
                        if (response.success) {
                            // Cierra el modal
                            var modalInstance = bootstrap.Modal.getInstance(document.getElementById('crearGrupoModal'));
                            modalInstance.hide();

                            // Muestra un mensaje de éxito (SweetAlert2)
                            Swal.fire({
                                icon: 'success',
                                title: 'Éxito',
                                text: response.message,
                                timer: 3000,
                                showConfirmButton: false
                            });

                            // Recargar el dropdown de Grupos con el nuevo grupo
                            $.ajax({
                                url: '@Url.Action("GetGruposAsSelectList", "Inscripcion")', 
                                type: 'GET',
                                success: function (grupos) {
                                    var selectGrupo = $('#IdGrupoSeleccionado');
                                    selectGrupo.empty(); // Limpiar opciones existentes
                                    $.each(grupos, function (i, grupo) {
                                        selectGrupo.append($('<option></option>').val(grupo.value).text(grupo.text));
                                    });
                                    // Seleccionar el nuevo grupo si es posible
                                    if (response.newGroupId) {
                                        selectGrupo.val(response.newGroupId);
                                    }
                                }
                            });

                        } else {
                            
                            // La respuesta 'response' contendrá el HTML del formulario con los errores
                            $('#modalBodyCrearGrupo').html(response); // Inyecta el formulario con errores
                            // Revalidar el formulario después de cargar el contenido con errores
                            var updatedForm = $('#modalBodyCrearGrupo').find('form');
                            if (updatedForm.length > 0) {
                                updatedForm.removeData("validator");
                                updatedForm.removeData("unobtrusiveValidation");
                                $.validator.unobtrusive.parse(updatedForm);
                            }
                        }
                    },
                    error: function (xhr, status, error) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Ocurrió un error al guardar el grupo. Intente de nuevo.'
                        });
                        console.error("Error al guardar grupo por AJAX:", error, xhr.responseText);
                    }
                });
            });
            // ---CÓDIGO PARA EL MODAL DE GRUPO ---

        }); 
    </script>
}