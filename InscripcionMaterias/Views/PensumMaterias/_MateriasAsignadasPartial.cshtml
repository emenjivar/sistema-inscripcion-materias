@model List<InscripcionMaterias.Models.PensumMateria>
@{
    int cantidadCiclos = ViewBag.CantidadCiclos ?? 0;
    string nombreCarrera = ViewBag.NombreCarrera;
	int idPensum = ViewBag.IdPensum ?? 0;
}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="utf-8" />
    <title>Configuración de Pensum - @nombreCarrera</title>
    <style>
        :root {
            --color-primario: #2c3e50;
            --color-secundario: #3498db;
            --color-fondo: #f8f9fa;
            --color-borde: #dee2e6;
            --color-texto: #212529;
            --color-destacado: #e74c3c;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            font-size: 14px;
            line-height: 1.6;
            color: var(--color-texto);
            background-color: var(--color-fondo);
            padding: 20px;
            margin: 0;
        }

        .header {
            background-color: var(--color-primario);
            color: white;
            padding: 15px 20px;
            border-radius: 5px;
            margin-bottom: 25px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

            .header h1 {
                margin: 0;
                font-size: 22px;
                font-weight: 600;
            }

        .header-info {
            display: flex;
            justify-content: space-between;
            margin-top: 10px;
            font-size: 13px;
        }

        .scroll-wrapper {
            overflow-x: auto;
            width: 100%;
        }
        .pensum-container {
            display: grid;
            grid-template-columns: repeat( @cantidadCiclos, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .ciclo-column {
            background-color: white;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            padding: 15px;
            border: 1px solid var(--color-borde);
        }

        .ciclo-header {
            background-color: var(--color-primario);
            color: white;
            padding: 8px 12px;
            border-radius: 4px;
            margin: -15px -15px 15px -15px;
            font-weight: 600;
            text-align: center;
        }

        .materia-card {
            border-left: 3px solid var(--color-secundario);
            background-color: white;
            border-radius: 4px;
            margin-bottom: 12px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.05);
            transition: transform 0.2s;
        }

            .materia-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            }

        .materia-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            border-bottom: 1px solid var(--color-borde);
        }

        .materia-codigo {
            font-weight: bold;
            color: var(--color-primario);
            font-size: 12px;
        }

        .materia-nombre {
            padding: 12px;
            font-weight: 500;
            color: var(--color-texto);
        }

        .materia-footer {
            display: flex;
            justify-content: space-between;
            padding: 8px 12px;
            background-color: var(--color-fondo);
            border-top: 1px solid var(--color-borde);
            font-size: 12px;
        }

        .uv-badge {
            background-color: var(--color-secundario);
            color: white;
            padding: 2px 6px;
            border-radius: 3px;
            font-weight: bold;
            font-size: 11px;
        }

        .empty-state {
            text-align: center;
            padding: 20px;
            color: #6c757d;
            font-style: italic;
            background-color: #f8f9fa;
            border-radius: 4px;
            border: 1px dashed #dee2e6;
        }

        .actions-bar {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            align-items: center;
        }

        .btn-agregar {
            background-color: var(--color-secundario);
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
            transition: background-color 0.2s;
        }

            .btn-agregar:hover {
                background-color: #2980b9;
            }

        .delete-btn {
            color: var(--color-destacado);
            background: none;
            border: none;
            cursor: pointer;
            font-size: 16px;
            font-weight: bold;
            padding: 0 5px;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Configuración de Pensum</h1>
        <div class="header-info">
            <span><strong>Carrera:</strong> @nombreCarrera</span>
            <span><strong>Ciclos:</strong> @cantidadCiclos</span>
            <span><strong>Materias asignadas:</strong> @Model.Count</span>
        </div>
    </div>

    <div class="actions-bar">
        <div>
            <!--
                    <button class="btn-agregar" onclick="agregarMateria()">
                + Agregar Materia
            </button>
            -->
        
            <a asp-controller="Reporte" asp-action="GenerarReportePensum" asp-route-id="@idPensum"
               class="btn btn-outline-primary" target="_blank">
                <i class="bi bi-file-earmark-pdf"></i> Descargar PDF
            </a>
        </div>
    </div>
    <div class="scroll-wrapper">
        <div class="pensum-container">
        @for (int ciclo = 1; ciclo <= cantidadCiclos; ciclo++)
        {
            <div class="ciclo-column">
                <div class="ciclo-header">
                    Ciclo @ciclo
                </div>

                @{
                    var materiasCiclo = Model.Where(m => m.CicloCurricular == ciclo).ToList();
                }

                @if (materiasCiclo.Any())
                {
                    foreach (var materia in materiasCiclo)
                    {
                        <div class="materia-card">
                            <div class="materia-header">
                                <div style="display:flex; gap: 8px; align-items:center;">
                                    <!-- Botón Editar -->
                                    <a href="#" onclick="abrirModalEditar(@materia.Id)" class="btn-editar text-primary fs-5 fw-bold text-decoration-none"
                                       title="Editar" style="line-height: 1; margin-left: 10px; cursor:pointer;">
                                        &#9998;
                                    </a>


                                    <!-- Botón Eliminar -->
                                    <a href="#" onclick="confirmDelete(event, '@materia.Id')" class="btn-eliminar text-danger fs-4 fw-bold text-decoration-none"
                                       data-id="@materia.Id" title="Eliminar" style="line-height: 1; cursor:pointer;">
                                        &times;
                                    </a>
                                </div>

                                <span class="materia-codigo">@materia.IdMateriaNavigation.Codigo</span>
                            </div>

                            <div class="materia-nombre">@materia.IdMateriaNavigation.Nombre</div>
                            <div class="materia-footer">
                                <span>@(materia.IdMateriaPrerequisito.HasValue ? materia.IdMateriaNavigation.Codigo : "-")</span>
                                <span class="uv-badge">@materia.IdMateriaNavigation.UnidadesValorativas UV</span>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="empty-state">
                        No hay materias asignadas a este ciclo
                    </div>
                }
            </div>
        }
    </div>
    </div>
    <!-- Modal Editar Materia -->
    <div id="modalEditarMateria" style="display:none; position: fixed; top:0; left:0; width: 100vw; height: 100vh; background-color: rgba(0,0,0,0.5); 
    z-index: 1000; justify-content: center; align-items: center;">
    <div style="background-color: white; border-radius: 8px; width: 80vw; max-width: 900px; max-height: 90vh; overflow-y: auto; 
        box-shadow: 0 4px 12px rgba(0,0,0,0.2); padding: 20px; position: relative;">
        
        <h2 style="color: var(--color-primario); margin-bottom: 15px;">Editar Materia</h2>
        
        <form id="formEditarMateria">
            <input type="hidden" name="Id" id="editId" />

            <label>
                Materia:
                <select name="IdMateria" id="editIdMateria" style="width: 100%; padding: 8px; border: 1px solid var(--color-borde); border-radius: 4px;" required>
                    <!-- opciones se cargarán por JS -->
                </select>
            </label>

            <label>
                Materia Prerrequisito:
                <select name="IdMateriaPrerequisito" id="editIdMateriaPrerequisito" style="width: 100%; padding: 8px; border: 1px solid var(--color-borde); border-radius: 4px;">
                    <option value="">-- Ninguno --</option>
                    <!-- opciones se cargarán por JS -->
                </select>
            </label>

            <label>
                Ciclo Curricular:
                <select name="CicloCurricular" id="editCicloCurricular" style="width: 100px; padding: 8px; border: 1px solid var(--color-borde); border-radius: 4px;" required>
                    <!-- opciones de 1 a cantidadCiclos -->
                    @for (int i = 1; i <= cantidadCiclos; i++)
                    {
                        <option value="@i">@i</option>
                    }
                </select>
            </label>

            <div style="margin-top: 25px; display: flex; justify-content: flex-end; gap: 15px;">
                <button type="button" onclick="cerrarModalEditar()" style="background: none; border: 1px solid var(--color-borde); color: var(--color-primario); padding: 8px 15px; border-radius: 4px; cursor: pointer;">
                    Cancelar
                </button>
                <button type="submit" class="btn-agregar" style="padding: 8px 20px;">
                    Guardar cambios
                </button>
            </div>
        </form>

        <button onclick="cerrarModalEditar()" style="position: absolute; top: 12px; right: 12px; background: none; border: none; font-size: 24px; color: var(--color-destacado); cursor: pointer;">
            &times;
        </button>
    </div>
</div>

    <script>
        console.log("estoy aqui");
                async function abrirModalEditar(id) {
            try {
                // Primero carga las materias para llenar los selects
                await cargarMateriasEnSelects();

                // Luego pide la información específica de la materia a editar
                const response = await fetch(`/PensumMaterias/GetById?id=${id}`);
                if (!response.ok) throw new Error("Error al obtener datos");
                const data = await response.json();

                // Rellena los campos del modal con la info recibida
                document.getElementById('editId').value = data.id;
                document.getElementById('editIdMateria').value = data.idMateria;
                document.getElementById('editIdMateriaPrerequisito').value = data.idMateriaPrerequisito ?? "";
                document.getElementById('editCicloCurricular').value = data.cicloCurricular;

                // Muestra el modal
                document.getElementById('modalEditarMateria').style.display = 'flex';
            } catch (error) {
                console.error("Error:", error);
                alert("No se pudo cargar la materia.");
            }
        }


        function cerrarModalEditar() {
            document.getElementById('modalEditarMateria').style.display = 'none';
        }
                function cargarMateriasEnSelects() {
            fetch('/PensumMaterias/GetMaterias')
                .then(res => res.json())
                .then(materias => {
                    let selectMateria = document.getElementById('editIdMateria');
                    let selectPrereq = document.getElementById('editIdMateriaPrerequisito');

                    selectMateria.innerHTML = '';
                    selectPrereq.innerHTML = '<option value="">-- Ninguno --</option>';

                    materias.forEach(m => {
                        let option = new Option(m.nombre, m.id);
                        selectMateria.appendChild(option);
                        selectPrereq.appendChild(option.cloneNode(true));
                    });
                });
        }
                document.getElementById("formEditarMateria").addEventListener("submit", function (e) {
            e.preventDefault();

            const data = {
                Id: document.getElementById('editId').value,
                IdMateria: document.getElementById('editIdMateria').value,
                IdMateriaPrerequisito: document.getElementById('editIdMateriaPrerequisito').value || null,
                CicloCurricular: document.getElementById('editCicloCurricular').value
            };

            fetch('/PensumMaterias/EditarMateria', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
                .then(res => {
                    if (!res.ok) throw new Error("Error al actualizar");
                    location.reload(); // recarga la página para ver cambios
                })
                .catch(err => {
                    alert("No se pudo actualizar la materia");
                    console.error(err);
                });
        });


    </script>

</body>
</html>